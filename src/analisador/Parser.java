
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\006\007\000\002\004\007" +
    "\000\002\004\003\000\002\010\004\000\002\010\003\000" +
    "\002\011\005\000\002\011\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\012\005\000\002\037" +
    "\005\000\002\037\003\000\002\016\011\000\002\024\005" +
    "\000\002\024\003\000\002\013\006\000\002\041\007\000" +
    "\002\041\003\000\002\005\005\000\002\014\003\000\002" +
    "\014\003\000\002\015\004\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\007\000\002\020\006\000\002\021\004\000" +
    "\002\021\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\006\000\002\025\004\000\002\026\004\000\002\026" +
    "\003\000\002\027\003\000\002\027\005\000\002\030\004" +
    "\000\002\030\005\000\002\031\005\000\002\031\003\000" +
    "\002\032\004\000\002\033\005\000\002\033\003\000\002" +
    "\034\003\000\002\034\006\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\005" +
    "\000\002\034\004\000\002\042\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\006\005\001\002\000\004\002\210\001" +
    "\002\000\004\023\006\001\002\000\004\027\007\001\002" +
    "\000\006\005\012\007\010\001\002\000\006\005\175\023" +
    "\143\001\002\000\004\013\013\001\002\000\004\013\ufffe" +
    "\001\002\000\004\023\137\001\002\000\004\014\024\001" +
    "\002\000\004\027\016\001\002\000\006\005\020\013\013" +
    "\001\002\000\004\014\ufff3\001\002\000\004\014\ufff1\001" +
    "\002\000\004\027\022\001\002\000\006\005\020\013\013" +
    "\001\002\000\004\014\ufff2\001\002\000\014\005\032\014" +
    "\024\016\034\020\027\023\035\001\002\000\004\026\026" +
    "\001\002\000\004\002\000\001\002\000\022\022\053\023" +
    "\050\024\046\025\056\031\045\035\051\040\044\041\047" +
    "\001\002\000\010\005\uffe2\027\uffe2\037\uffe2\001\002\000" +
    "\004\015\133\001\002\000\004\015\uffe8\001\002\000\010" +
    "\005\uffe3\027\uffe3\037\uffe3\001\002\000\022\022\053\023" +
    "\050\024\046\025\056\031\045\035\051\040\044\041\047" +
    "\001\002\000\014\005\uffdc\027\uffdc\031\121\033\uffdd\037" +
    "\uffdc\001\002\000\006\005\115\027\114\001\002\000\004" +
    "\015\uffe9\001\002\000\004\033\041\001\002\000\022\022" +
    "\053\023\050\024\046\025\056\031\045\035\051\040\044" +
    "\041\047\001\002\000\006\005\107\036\111\001\002\000" +
    "\010\004\070\005\067\035\064\001\002\000\006\005\uffca" +
    "\036\uffca\001\002\000\022\022\053\023\050\024\046\025" +
    "\056\031\045\035\051\040\044\041\047\001\002\000\006" +
    "\005\uffcc\036\uffcc\001\002\000\006\005\uffc9\036\uffc9\001" +
    "\002\000\010\005\uffce\031\073\036\uffce\001\002\000\020" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\031\uffc6\040\uffc6\041" +
    "\uffc6\001\002\000\020\022\053\023\050\024\046\025\056" +
    "\031\045\040\044\041\047\001\002\000\020\022\053\023" +
    "\050\024\046\025\056\031\045\040\044\041\047\001\002" +
    "\000\010\005\uffe4\027\uffe4\037\uffe4\001\002\000\040\005" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\027\uffd7\031\uffd7\032\uffd7\034\057\035\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\001\002\000\006\005\uffcb\036\uffcb\001\002" +
    "\000\022\022\uffc5\023\uffc5\024\uffc5\025\uffc5\031\uffc5\035" +
    "\uffc5\040\uffc5\041\uffc5\001\002\000\022\022\053\023\050" +
    "\024\046\025\056\031\045\035\051\040\044\041\047\001" +
    "\002\000\036\005\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\031\uffd6\032\uffd6\035\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\001\002\000\006\005\uffc7\036\uffc7" +
    "\001\002\000\010\004\070\005\067\035\064\001\002\000" +
    "\020\022\uffc4\023\uffc4\024\uffc4\025\uffc4\031\uffc4\040\uffc4" +
    "\041\uffc4\001\002\000\020\022\053\023\050\024\046\025" +
    "\056\031\045\040\044\041\047\001\002\000\040\005\uffd4" +
    "\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\027" +
    "\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\001\002\000\040\005\uffd2\017\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\034\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002\000" +
    "\020\022\uffc3\023\uffc3\024\uffc3\025\uffc3\031\uffc3\040\uffc3" +
    "\041\uffc3\001\002\000\010\004\070\005\067\035\064\001" +
    "\002\000\040\005\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\027\uffd3\031\uffd3\032\uffd3\034\uffd3\035" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\001\002\000\022\022\053" +
    "\023\050\024\046\025\056\031\045\035\051\040\044\041" +
    "\047\001\002\000\004\032\102\001\002\000\024\005\076" +
    "\022\053\023\050\024\046\025\056\031\045\035\051\040" +
    "\044\041\047\001\002\000\004\032\uffd8\001\002\000\024" +
    "\005\076\022\053\023\050\024\046\025\056\031\045\035" +
    "\051\040\044\041\047\001\002\000\004\032\uffda\001\002" +
    "\000\004\032\uffd9\001\002\000\006\005\uffcd\036\uffcd\001" +
    "\002\000\004\032\104\001\002\000\006\005\uffc8\036\uffc8" +
    "\001\002\000\040\005\uffd5\017\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\031\uffd5\032\uffd5\034\uffd5" +
    "\035\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000\020\022" +
    "\053\023\050\024\046\025\056\031\045\040\044\041\047" +
    "\001\002\000\010\004\uffcf\005\uffcf\035\uffcf\001\002\000" +
    "\010\004\uffd1\005\uffd1\035\uffd1\001\002\000\020\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\031\uffc2\040\uffc2\041\uffc2\001" +
    "\002\000\006\005\107\036\111\001\002\000\010\004\uffd0" +
    "\005\uffd0\035\uffd0\001\002\000\012\014\024\016\034\020" +
    "\027\023\035\001\002\000\004\015\uffe5\001\002\000\004" +
    "\015\uffe7\001\002\000\006\005\115\027\114\001\002\000" +
    "\004\015\uffe6\001\002\000\022\022\053\023\050\024\046" +
    "\025\056\031\045\035\051\040\044\041\047\001\002\000" +
    "\004\032\123\001\002\000\010\005\uffdb\027\uffdb\037\uffdb" +
    "\001\002\000\004\017\125\001\002\000\012\014\024\016" +
    "\034\020\027\023\035\001\002\000\006\005\130\037\127" +
    "\001\002\000\012\014\024\016\034\020\027\023\035\001" +
    "\002\000\010\005\uffde\027\uffde\037\uffde\001\002\000\010" +
    "\005\uffe1\027\uffe1\037\uffe1\001\002\000\010\005\uffdf\027" +
    "\uffdf\037\uffdf\001\002\000\012\005\uffea\026\uffea\027\uffea" +
    "\037\uffea\001\002\000\004\021\135\001\002\000\012\014" +
    "\024\016\034\020\027\023\035\001\002\000\010\005\uffe0" +
    "\027\uffe0\037\uffe0\001\002\000\006\005\140\031\142\001" +
    "\002\000\004\027\uffee\001\002\000\004\027\170\001\002" +
    "\000\004\023\143\001\002\000\012\005\165\013\ufff9\027" +
    "\163\030\ufff9\001\002\000\004\032\162\001\002\000\004" +
    "\030\146\001\002\000\010\010\147\011\150\012\152\001" +
    "\002\000\006\005\ufff6\027\ufff6\001\002\000\006\005\ufff5" +
    "\027\ufff5\001\002\000\006\005\154\027\153\001\002\000" +
    "\006\005\ufff4\027\ufff4\001\002\000\004\023\143\001\002" +
    "\000\004\032\uffeb\001\002\000\004\032\uffed\001\002\000" +
    "\004\030\157\001\002\000\010\010\147\011\150\012\152" +
    "\001\002\000\006\005\154\027\153\001\002\000\004\032" +
    "\uffec\001\002\000\004\027\uffef\001\002\000\004\023\166" +
    "\001\002\000\006\013\ufffa\030\ufffa\001\002\000\006\013" +
    "\ufff7\030\ufff7\001\002\000\006\005\165\027\163\001\002" +
    "\000\006\013\ufff8\030\ufff8\001\002\000\006\005\012\007" +
    "\010\001\002\000\004\013\013\001\002\000\004\014\024" +
    "\001\002\000\004\027\ufff0\001\002\000\004\013\uffff\001" +
    "\002\000\004\030\ufffb\001\002\000\004\030\204\001\002" +
    "\000\004\030\200\001\002\000\010\010\147\011\150\012" +
    "\152\001\002\000\004\027\202\001\002\000\006\005\175" +
    "\023\143\001\002\000\004\030\ufffc\001\002\000\010\010" +
    "\147\011\150\012\152\001\002\000\004\027\206\001\002" +
    "\000\004\023\143\001\002\000\004\013\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\010\001\001" +
    "\000\010\004\175\006\173\010\176\001\001\000\006\012" +
    "\013\016\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\024\001\001\000\002\001\001\000\006\016" +
    "\020\037\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\020\037\022\001\001\000" +
    "\002\001\001\000\016\005\027\014\030\015\036\020\035" +
    "\022\037\023\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\133\030\054\032\042\034\041\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\123\030\054\032\042" +
    "\034\041\042\051\001\001\000\002\001\001\000\004\017" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\027\053\030\054\032\042\034\041\042\051\001\001\000" +
    "\006\033\107\040\105\001\001\000\006\031\104\036\064" +
    "\001\001\000\002\001\001\000\014\027\102\030\054\032" +
    "\042\034\041\042\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\062\034\041\001\001\000\004\034\061\001\001\000\002" +
    "\001\001\000\004\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\060\032\042\034\041\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\065\036\064\001\001\000\002\001\001\000\006\032\070" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\071\036\064\001\001\000\002" +
    "\001\001\000\016\025\073\027\074\030\054\032\042\034" +
    "\041\042\051\001\001\000\002\001\001\000\016\026\077" +
    "\027\076\030\054\032\042\034\041\042\051\001\001\000" +
    "\002\001\001\000\016\026\100\027\076\030\054\032\042" +
    "\034\041\042\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\112" +
    "\040\105\001\001\000\002\001\001\000\012\005\027\020" +
    "\116\022\037\023\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\117\001\001\000\002\001\001\000" +
    "\016\025\121\027\074\030\054\032\042\034\041\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\027\020\125\022\037\023\032\001\001" +
    "\000\004\021\130\001\001\000\012\005\027\020\131\022" +
    "\037\023\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\027\020\135\022\037\023\032\001\001\000\002" +
    "\001\001\000\004\024\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\144\013\143\001\001\000\004" +
    "\011\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\154\001\001\000\002\001\001\000\004\010" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\157\001\001\000\004\041\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\166\001" +
    "\001\000\002\001\001\000\004\003\170\001\001\000\006" +
    "\012\171\016\014\001\001\000\004\005\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\200\001\001\000" +
    "\002\001\001\000\006\004\202\010\176\001\001\000\002" +
    "\001\001\000\004\007\204\001\001\000\002\001\001\000" +
    "\004\010\206\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= PROGRAM ID PONTOVIRG DECLARACOES_VARIAVEIS DECLARACOES_DE_SUBPROGRAMAS COMANDO_COMPOSTO PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACOES_VARIAVEIS ::= VAR LISTA_DECLARACOES_VARIAVEIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACOES_VARIAVEIS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACOES_VARIAVEIS ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACOES_VARIAVEIS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_DECLARACOES_VARIAVEIS ::= LISTA_DECLARACOES_VARIAVEISi DOISPONTOS TIPO PONTOVIRG LISTA_DE_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACOES_VARIAVEIS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_DECLARACOES_VARIAVEISi ::= LISTA_DE_IDENTIFICADORES DOISPONTOS TIPO PONTOVIRG LISTA_DECLARACOES_VARIAVEISi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACOES_VARIAVEISi",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_DECLARACOES_VARIAVEISi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACOES_VARIAVEISi",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DE_IDENTIFICADORES ::= ID LISTA_DE_IDENTIFICADORESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DE_IDENTIFICADORES ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_IDENTIFICADORES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_DE_IDENTIFICADORESi ::= PONTOVIRG ID LISTA_DE_IDENTIFICADORESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_IDENTIFICADORESi",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_DE_IDENTIFICADORESi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_IDENTIFICADORESi",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACOES_DE_SUBPROGRAMAS ::= DECLARACAO_DE_SUBPROGRAMA PONTOVIRG DECLARACOES_DE_SUBPROGRAMASi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACOES_DE_SUBPROGRAMAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACOES_DE_SUBPROGRAMASi ::= DECLARACAO_DE_SUBPROGRAMA PONTOVIRG DECLARACOES_DE_SUBPROGRAMASi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACOES_DE_SUBPROGRAMASi",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACOES_DE_SUBPROGRAMASi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACOES_DE_SUBPROGRAMASi",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACAO_DE_SUBPROGRAMA ::= PROCEDURE ID ARGUMENTOS PONTOVIRG DECLARACOES_VARIAVEIS DECLARACOES_DE_SUBPROGRAMAS COMANDO_COMPOSTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACAO_DE_SUBPROGRAMA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTOS ::= ABREPAR LISTA_DE_PARAMETROS FECHAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARGUMENTOS ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_DE_PARAMETROS ::= LISTA_DE_IDENTIFICADORES DOISPONTOS TIPO LISTA_DE_PARAMETROSi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_DE_PARAMETROSi ::= PONTOVIRG LISTA_DE_IDENTIFICADORES DOISPONTOS TIPO LISTA_DE_PARAMETROSi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_PARAMETROSi",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_DE_PARAMETROSi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_PARAMETROSi",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMANDO_COMPOSTO ::= BEGIN COMANDOS_OPCIONAIS END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO_COMPOSTO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMANDOS_OPCIONAIS ::= LISTA_DE_COMANDOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS_OPCIONAIS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMANDOS_OPCIONAIS ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS_OPCIONAIS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_DE_COMANDOS ::= COMANDO LISTA_DE_COMANDOSi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_COMANDOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_DE_COMANDOSi ::= PONTOVIRG COMANDO LISTA_DE_COMANDOSi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_COMANDOSi",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_DE_COMANDOSi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_COMANDOSi",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMANDO ::= VARIAVEL ATRIBUICAO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMANDO ::= ATIVACAO_DE_PROCEDIMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMANDO ::= COMANDO_COMPOSTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMANDO ::= IF EXPRESSAO THEN COMANDO PARTE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMANDO ::= WHILE EXPRESSAO DO COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARTE_ELSE ::= ELSE COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARTE_ELSE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARTE_ELSE ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARTE_ELSE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIAVEL ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIAVEL",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATIVACAO_DE_PROCEDIMENTO ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATIVACAO_DE_PROCEDIMENTO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATIVACAO_DE_PROCEDIMENTO ::= ID ABREPAR LISTA_DE_EXPRESSOES FECHAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATIVACAO_DE_PROCEDIMENTO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_DE_EXPRESSOES ::= EXPRESSAO LISTA_DE_EXPRESSOESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_EXPRESSOES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_DE_EXPRESSOESi ::= EXPRESSAO LISTA_DE_EXPRESSOESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_EXPRESSOESi",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_DE_EXPRESSOESi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DE_EXPRESSOESi",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSAO ::= EXPRESSAO_SIMPLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSAO ::= EXPRESSAO_SIMPLES OP_RELACIONAL EXPRESSAO_SIMPLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSAO_SIMPLES ::= TERMO EXPRESSAO_SIMPLESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_SIMPLES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESSAO_SIMPLES ::= SINAL TERMO EXPRESSAO_SIMPLESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_SIMPLES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESSAO_SIMPLESi ::= OP_ADITIVO TERMO EXPRESSAO_SIMPLESi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_SIMPLESi",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSAO_SIMPLESi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_SIMPLESi",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TERMO ::= FATOR TERMOi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TERMOi ::= OP_MULTIPLICATIVO FATOR TERMOi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMOi",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERMOi ::= VAZIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMOi",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FATOR ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FATOR ::= ID ABREPAR LISTA_DE_EXPRESSOES FECHAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FATOR ::= INTEIROS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FATOR ::= REAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FATOR ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FATOR ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FATOR ::= ABREPAR EXPRESSAO FECHAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FATOR ::= NOT FATOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SINAL ::= ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINAL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_RELACIONAL ::= RELACIONAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_ADITIVO ::= ADITIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ADITIVO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_ADITIVO ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ADITIVO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_MULTIPLICATIVO ::= MULTIPLICATIVOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_MULTIPLICATIVO",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
